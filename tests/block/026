#!/bin/bash
# SPDX-License-Identifier: GPL-3.0+
#
# Test io.latency to make sure it's protecting the higher priority group
# properly.

. tests/block/rc
. common/cgroup

DESCRIPTION="run a \"protected\" and \"background\" workload together with io.latency"

requires() {
	_have_cgroup2_controller_file io io.latency && _have_fio && \
		_have_program jq
}

sum_read_write_bytes() {
	local job=$1
	local resultfile=$2
	local readbytes writebytes

	readbytes=$(_fio_results_key "$job" read.io_bytes "$resultfile")
	writebytes=$(_fio_results_key "$job" write.io_bytes "$resultfile")
	echo $((readbytes + writebytes))
}

test_device() {
	echo "Running ${TEST_NAME}"

	local fio_config_single fio_config_double fio_results fio_args qd

	_init_cgroup2

	fio_config_single="$TMPDIR/single.fio"
	fio_config_double="$TMPDIR/double.fio"
	fio_results="$TMPDIR/results.json"
	fio_args=("--output-format=json" "--output=$fio_results")
	qd=$(cat "$TEST_DEV_SYSFS/queue/nr_requests")

	cat << EOF > "$fio_config_single"
	[fast]
	filename=$TEST_DEV
	direct=1
	allrandrepeat=1
	readwrite=randrw
	runtime=60
	ioengine=libaio
	iodepth=$qd
	randseed=12345
EOF

	cat << EOF > "$fio_config_double"
	[global]
	filename=$TEST_DEV
	direct=1
	allrandrepeat=1
	readwrite=randrw
	runtime=60
	ioengine=libaio
	iodepth=$qd
	randseed=12345

	[fast]
	cgroup=blktests/fast

	[slow]
	cgroup=blktests/slow
EOF
	# We run the test once so we have an idea of how fast this workload will
	# go with nobody else doing IO on the device.
	if ! fio "${fio_args[@]}" "$fio_config_single"; then
		echo "fio exited with status $?"
		return 1
	fi

	local total_io
	total_io=$(sum_read_write_bytes fast "$fio_results")

	echo "normal io done $total_io" >> "$FULL"

	# There's no way to predict how the two workloads are going to affect
	# each other, so we want to set thresholds to something reasonable so we
	# can verify io.latency is doing something.  Since throttling doesn't
	# kick in immediately we'll assume that being able to do at least 85% of
	# our normal IO in the same time that we are properly protected.
	local thresh=$((total_io - total_io * 15 / 100))

	echo "threshold is $thresh" >> "$FULL"

	# Create the cgroup files
	echo "+io" > "$CGROUP2_DIR/cgroup.subtree_control"
	mkdir "$CGROUP2_DIR/fast"
	mkdir "$CGROUP2_DIR/slow"

	# We set the target to 1usec because we could have a fast device that is
	# capable of remarkable IO latencies that would skew the test.  It needs
	# to be low enough that we do actually throttle the slow group,
	# otherwise the test will fail when there's nothing wrong.
	local major=$((0x$(stat -c "%t" "$TEST_DEV")))
	local minor=$((0x$(stat -c "%T" "$TEST_DEV")))
	echo "${major}:${minor} is our device" >> "$FULL"
	if ! echo "${major}:${minor} target=1" > "$CGROUP2_DIR/fast/io.latency"; then
		echo "Failed to set our latency target"
		return 1
	fi

	if ! fio "${fio_args[@]}" "$fio_config_double"; then
		echo "fio exited with status $?"
		return 1
	fi

	local fast_io slow_io
	fast_io=$(sum_read_write_bytes fast "$fio_results")
	echo "Fast io $fast_io" >> "$FULL"
	slow_io=$(sum_read_write_bytes slow "$fio_results")
	echo "Slow io $slow_io" >> "$FULL"

	# First make sure we did at least 85% of our uncontested IO
	if [[ $thresh -gt $fast_io ]]; then
		echo "Too much of a performance drop for the protected workload"
		return 1
	fi

	# Now make sure we didn't do more IO in our slow group than we did in
	# our fast group.
	if [[ $fast_io -lt $slow_io ]]; then
		echo "The slow group does not appear to have been throttled"
		return 1
	fi

	# Now caculate the percent difference between the slow io and fast io.
	# If io.latency isn't doing anything then these two groups would compete
	# essentially fairly, so they would be within a few single percentage
	# points of each other.  So assume anything less than a 15% difference
	# means we didn't throttle the slow group properly.
	local pct_diff
	pct_diff=$(((fast_io - slow_io) * 100 / ((fast_io + slow_io) / 2)))

	echo "Percent difference is $pct_diff" >> "$FULL"

	if [[ $pct_diff -lt "15" ]]; then
		echo "The slow group does not appear to have been throttled"
		return 1
	fi

	echo "Test complete"
}
